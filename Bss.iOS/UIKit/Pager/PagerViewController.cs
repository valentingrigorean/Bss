// This file has been autogenerated from a class added in the UI designer.

using UIKit;
using CoreGraphics;
using System;
using Bss.iOS.Extensions;

namespace Bss.iOS.UIKit.Pager
{
    public partial class PagerViewController : UIViewController
    {
        private PagerDataSource _dataSource;
        private PageViewController _pageviewController;

        public PagerViewController() : base("PagerViewController", null)
        {

        }

        public PagerViewController(CGRect frame) : base("PagerViewController", null)
        {
            View.Frame = frame;
        }

        public event EventHandler<int> OnNewPage;

        public PagerDataSource DataSource
        {
            get { return _dataSource; }
            set
            {
                _dataSource = value;
                if (value == null) 
                    return;
                GotDataSource();
            }
        }

        public int CurrentPage
        {
            get { return _pageviewController == null ? 0 : _pageviewController.CurrentPage; }
            set { _pageviewController?.GotoScreen(value, true); }
        }

        public void SetPage(int page, bool animated)
        {
            _pageviewController?.GotoScreen(page, animated);
        }

        private PagerConfig _config;
        public PagerConfig Config
        {
            get
            {
                if (_config == null) _config = new PagerConfig();
                return _config;
            }
            set
            {
                _config = value;
            }
        }

        private void GotDataSource()
        {
            Pager.Hidden = DataSource.Count <= 1 || !Config.ShowDots;
            Pager.Pages = DataSource.Count;
            Pager.TintColor = Config.DotDefaultColor;
			Pager.PageIndicatorTintColor = Config.DotDefaultColor;
            Pager.CurrentPageIndicatorTintColor = Config.DotSelectedColor;
            Config.PropertyChanged += (sender, e) =>
            {
                switch (e.PropertyName)
                {
                    case "ShowPager":
                        Pager.Hidden = !Config.ShowDots;
                        break;
                    case "DotDefaultColor":
                        Pager.TintColor = Config.DotDefaultColor;
                        break;
                    case "DotSelectedColor":
                        Pager.CurrentPageIndicatorTintColor = Config.DotSelectedColor;
                        break;
                }
            };

            ContainerViewGallery.BackgroundColor = Config.BackgroundColor;

            if (DataSource.Count == 1)
                Config.TransitionStyle = UIPageViewControllerTransitionStyle.Scroll;
            if (_pageviewController == null)
            {
                _pageviewController = new PageViewController(Config, this);
                _pageviewController.MoveTo(this, ContainerViewGallery);

                _pageviewController.OnNewPage += (page) =>
                {
                    Pager.CurrentPage = page;
                    OnNewPage?.Invoke(this,page);
                };

                _pageviewController.MoveTo(this, ContainerViewGallery);
            }
            _pageviewController.GalleryDataSource = DataSource;
        }

    }
}
